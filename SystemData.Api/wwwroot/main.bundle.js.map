{"version":3,"sources":["./src/$_lazy_route_resource lazy","./src/app/app.component.css","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/component/system-processes/system-processes.component.css","./src/app/component/system-processes/system-processes.component.html","./src/app/component/system-processes/system-processes.component.ts","./src/app/service/system-processes-http.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/$$_lazy_route_resource lazy\n// module id = ./src/$$_lazy_route_resource lazy recursive\n// module chunks = main","module.exports = \"#toast-container > .toast-success {\\r\\n    color: #3c763d;\\r\\n    background-color: #dff0d8;\\r\\n    border-color: #d6e9c6;\\r\\n}\\r\\n\\r\\n#toast-container > .toast-error {\\r\\n    color: #a94442;\\r\\n    background-color: #f2dede;\\r\\n    border-color: #ebccd1;\\r\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = ./src/app/app.component.css\n// module chunks = main","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div>    \\n  <h1>\\n    System process monitor\\n  </h1>  \\n  <toaster-container [toasterconfig]=\\\"config\\\"></toaster-container>    \\n  <div>       \\n      <app-system-processes></app-system-processes>  \\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = ./src/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\nimport { ToasterConfig } from 'angular2-toaster';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  public config: ToasterConfig = new ToasterConfig({animation: 'flyLeft', timeout: 2000});\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpModule} from '@angular/http';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {ToasterModule, ToasterService} from 'angular2-toaster';\n\nimport { AppComponent } from './app.component';\nimport { SystemProcessesComponent } from './component/system-processes/system-processes.component';\n\nimport { SystemProcessesHttpService } from './service/system-processes-http.service';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SystemProcessesComponent\n  ],\n  imports: [\n    HttpModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    ToasterModule.forRoot()\n  ],\n  providers: [SystemProcessesHttpService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","module.exports = \"header {\\r\\n    margin: 20px;\\r\\n    padding: 10px;\\r\\n    background-color: cadetblue;\\r\\n    display: inline-block;\\r\\n}\\r\\n\\r\\n.process-list-container {\\r\\n    height: 600px;\\r\\n    border: 2px solid #355169;\\r\\n    overflow: auto;\\r\\n}\\r\\n\\r\\n.process-item {\\r\\n    border: 2px solid #355169;\\r\\n    border-radius: 10px;\\r\\n    margin: 10px;\\r\\n    padding: 10px;\\r\\n    display: inline-block;\\r\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/system-processes/system-processes.component.css\n// module id = ./src/app/component/system-processes/system-processes.component.css\n// module chunks = main","module.exports = \"<div class=\\\"process-list-container\\\">    \\n    <header> Total {{ processes.length }} processes running </header>\\n    <section>\\n        <div class='process-item' *ngFor='let process of processes' (click)=\\\"stopProcess(process)\\\">{{ process.id }} - {{ process.title }}</div>\\n    </section>\\n</div>\\n\\n  \"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/system-processes/system-processes.component.html\n// module id = ./src/app/component/system-processes/system-processes.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\nimport { ProcessViewModel } from '../../model/process-vm';\nimport { SystemProcessesHttpService } from '../../service/system-processes-http.service';\nimport { ToasterService } from 'angular2-toaster';\n\n@Component({\n  selector: 'app-system-processes',\n  templateUrl: './system-processes.component.html',\n  styleUrls: ['./system-processes.component.css']\n})\nexport class SystemProcessesComponent implements OnInit {\n\n  processes: ProcessViewModel[];\n\n  constructor(private _systemProcessesHttpService: SystemProcessesHttpService,\n              private _toasterService: ToasterService) { }\n\n  ngOnInit() {\n    this.getAllProcess();\n  }\n\n  public stopProcess(item: ProcessViewModel) {\n    this._systemProcessesHttpService.stopProcess(item.id)\n      .subscribe(\n        resData => this.onStopProcessSuccess(item),\n        err => this.onResponseError(err, 'Stop process errors:'));\n  }\n\n  private getAllProcess() {\n    this._systemProcessesHttpService.getSystemProcesses()\n    .subscribe(\n      resData => this.onDataGetSuccess(resData),\n      err => this.onResponseError(err, 'Data receive errors:' ));\n  }\n\n  private onDataGetSuccess(data: any) {\n    console.log(data);\n    this.processes = data;\n  }\n\n  private onStopProcessSuccess(process: ProcessViewModel) {\n    this._toasterService.pop('success', 'Process stoped', process.id + ' : ' + process.title );\n    this.getAllProcess();\n  }\n\n  private onResponseError(err: Error, msg: string) {\n    this._toasterService.pop('error', 'Data receive errors:', err.name + ' - message : ' + err.message);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/component/system-processes/system-processes.component.ts","import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Headers, RequestOptions } from '@angular/http';\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class SystemProcessesHttpService {\n  private _url = 'http://localhost:52239/api/SystemProcess';\n  private headers = new Headers({'Content-Type': 'application/json'});\n\n  constructor(private _http: Http) { }\n\n  getSystemProcesses () {\n    console.log('start getting processes');\n    return this._http.get(this._url)\n      .map((response: Response) => response.json());\n  }\n\n  stopProcess(id: number) {\n    console.log('kill process ' + id);\n    const options = new RequestOptions({ headers : this.headers});\n    return this._http.delete(this._url + '/' + id, options);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/service/system-processes-http.service.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts"],"sourceRoot":"webpack:///"}